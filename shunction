#!/usr/bin/env bash
# Make sure the current directory is the location of this script to simplify matters
cd "$(dirname $(readlink -f $0))";
################
### Settings ###
################

# The name of this project
project_name="shunction";

# The path to the lantern build engine git submodule
lantern_path="lantern-build-engine";

###
# Custom Settings
###

config_file=""; # Empty string - don't bother
functions_folder="./functions";

###############################################################################

# Check out the lantern git submodule if needed
if [ ! -f "${lantern_path}/lantern.sh" ]; then git submodule update --init "${lantern_path}"; fi

source "${lantern_path}/lantern.sh";



###############################################################################

# $1	Time to parse
parse_time() {
	echo "$1" | tr 'ms' '\t' | awk '{ print(($1*60)+$2) }';
}

# $1 - function name
get_function_filepath() {
	echo "${functions_folder}/${1}.func";
}

###############################################################################

task_help() {
	echo -e "${FBLE}${project_name}${RS}";
	echo -e "    by Starbeamrainbowlabs";
	echo -e "${LC}Powered by the lantern build engine, v${version}${RS}";
	echo -e "";
	echo -e "${CSECTION}Usage${RS}";
	echo -e "    shunction ${CTOKEN}{action}${RS} {options}";
	echo -e "    shunction ${CTOKEN}--help${RS}";
	echo -e "";
	echo -e "${CSECTION}Actions${RS}";
	echo -e "    ${CACTION}trigger${RS} ${CTOKEN}{adhoc|cron} {function_name}${RS}";
	echo -e "        ${LC}Trigger a function${RS}";
	echo -e "    ${CACTION}inotify${RS} ${CTOKEN}{path to file or dir} {function_name}${RS}";
	echo -e "        ${LC}Watch a file or directory, and trigger a function on change${RS}";
	echo -e "";
	echo -e "${CSECTION}Options${RS}";
	echo -e "    ${CTOKEN}-c  --config    Specify the configuration file location";
	echo -e "";
}

task_trigger() {
	trigger_type="${extras[1]}"; # adhoc, cron[, inotify, http]
	function_name="${extras[2]}";
	
	if [[ "${trigger_type}" == "" ]]; then
		echo -e "${FRED}${HC}Error: No trigger type specified.${RS}";
		echo -e "${CSECTION}Actions${RS}";
		echo -e "    ${CTOKEN}adhoc${RS}      Triggered manually";
		echo -e "    ${CTOKEN}cron${RS}       Triggered via cron";
		echo -e "    ${CTOKEN}inotify${RS}    Triggered via inotify";
		echo -e "    ${CTOKEN}http${RS}       Triggered via http";
		exit 3;
	elif [[ "${function_name}" == "" ]]; then
		echo -e "${FRED}${HC}Error: No function name specified.";
		exit 7;
	fi
	
	function_filename="$(get_function_filepath "${function_name}")";
	
	if [[ ! -f "${function_filename}" ]]; then
		echo -e "${FRED}${HC}Error: '${function_filename}' doesn't exist.${RS}";
		exit 5;
	elif [[ ! -x "${function_filename}" ]]; then
		echo -e "${FRED}${HC}Error: '${function_filename}' exists, but isn't executable.${RS}";
		exit 4;
	fi
	
	#######################################################
	
	tmpfile="$(mktemp -p /dev/shm/ -t shunction.XXXXXXXXX.stdout.tmp)";
	
	export STN_TRIGGER_TYPE="${trigger_type}";
	export STN_FUNCTION_NAME="${function_name}";
	
	# start_time="$(date +%s.%N)";
	raw_cputime="$(time ( "${function_filename}" >"${tmpfile}" 2>&1 ) 2>&1 1>/dev/null)";
	exit_code="$?";
	raw_cputime="$(echo "${raw_cputime}" | tr '\n' '\t')";
	# end_time="$(date +%s.%N)";
	
	time_taken_real="$(parse_time "$(echo "${raw_cputime}" | awk '{ print $2 }')")";
	time_taken_user="$(parse_time "$(echo "${raw_cputime}" | awk '{ print $4 }')")";
	time_taken_kern="$(parse_time "$(echo "${raw_cputime}" | awk '{ print $6 }')")";
	
	# time_taken="$(echo "${end_time} - ${start_time}" | bc)";
	
	#######################################################
	
	if [[ "$(cat "${tmpfile}" | wc -l)" -gt 1 ]]; then
		stage_begin "${function_name} output";
		cat "${tmpfile}";
		stage_end 0;
	else
		echo -e "${LC}[trigger] Output:${RS} $(cat "${tmpfile}")";
	fi
	
	rm "${tmpfile}";
	
	
	echo -e "[trigger] Executed ${HC}${function_name}${RS} in ${HC}${time_taken_real}${RS}s / (cpu: ${HC}${time_taken_user}${RS}s user, ${HC}${time_taken_kern}${RS}s kernel).";
	
	#logger --tag "shunction" --id=$$ "Executed ${function_name} in ${time_taken}ms";
}

task_inotify() {
	path="${extras[1]}";
	function_name="${extras[2]}";
	
	if [[ "${path}" == "" ]]; then
		echo -e "${FRED}${HC}Error: No file or directory specified.${RS}";
		exit 8;
	elif [[ "${function_name}" == "" ]]; then
		echo -e "${FRED}${HC}Error: No function name specified.";
		exit 9;
	fi
	
	# Update the function running parameters ready for running the trigger task
	# TODO: Refactor task_trigger to pull out the extras into environment variables instead
	extras[1]="inotify";
	extras[2]="${function_name}";
	
	while :; do # : = infinite loop
		# Wait for an update
		# inotifywait's non-0 exit code forces an exit for some reason :-/
		raw_inotify="$(inotifywait -qr -e modify -e attrib -e close_write -e move -e create -e delete -e delete_self -e unmount -e move_self --format '%:e %f' "${path}")";
		
		event_type="$(echo "${raw_inotify}" | cut -d' ' -f1)";
		filename="$(echo "${raw_inotify}" | cut -d' ' -f2-)";
		
		# Push the trigger into the background so that we get back to listening via inotify asap
		tasks_run "trigger" &
	done
}

###############################################################################

# Bash array cheat sheet
# Append		rockets+=("${item}")
# Get length	${#rockets[@]}
# Get item		${rockets[${var_name}]}

while [[ "${#@}" -gt 0 ]]; do
	next="${1}";
	# echo -e "${LC}[CLI] Parsing ${next}${RS}";
	
	if [[ "${next}" != -* ]]; then # It doesn't start with a dash
		# echo -e "${LC}[CLI] Doesn't start with a dash";
		extras+=("${next}");
		shift;
		continue;
	fi
	
	case "${next}" in
		"--help" )
			tasks_run help;
			exit 1;
			;;
		
		
		"--config" )
			shift;
			config_file="${1}";
			;;
			
		*)
			echo -e "${FRED}${HC}Error: Unknown argument ${next}${RS}";
			exit 2;
			;;
	esac
	
	shift
done

if [[ "${#extras[@]}" -lt 1 ]]; then
	tasks_run help;
	exit 1;
fi

#echo -e "${LC}[CLI] Action: ${extras[0]}${RS}";
#tasks_run $1;

# If a config file is specified but doesn't exist, then throw an error
if [[ "${config_file}" != "" ]] && [[ ! -f "${config_file}" ]]; then
	echo -e "${FRED}${HC}Error: Failed to find config file at '${config_file}'.${RS}";
	exit 6;
fi

if [[ "${config_file}" != "" ]]; then
	source "${config_file}";
fi

tasks_run "${extras[0]}";
